version: '3.8'

services:
  api:
    build:
      context: ../
      dockerfile: ./deployment/api.Dockerfile
    image: renexus/api:latest
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:root@postgres:5432/renexus
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=86400
    ports:
      - "3000:3000"
    networks:
      - renexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web-client:
    build:
      context: ../
      dockerfile: ./deployment/web-client.Dockerfile
    image: renexus/web-client:latest
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - renexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=renexus
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - renexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - renexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - renexus-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      - renexus-network

  backup:
    image: postgres:14-alpine
    restart: always
    depends_on:
      - postgres
    volumes:
      - ./backup:/backup
    environment:
      - POSTGRES_PASSWORD=root
    networks:
      - renexus-network
    command: |
      sh -c 'while true; do
        pg_dump -h postgres -U postgres -d renexus -f /backup/renexus_backup_$(date +%Y%m%d_%H%M%S).sql;
        find /backup -name "renexus_backup_*.sql" -type f -mtime +7 -delete;
        sleep 86400;
      done'

networks:
  renexus-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
