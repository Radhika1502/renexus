name: Renexus CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Run TypeScript check
        run: npm run typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: renexus_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Generate Prisma client
        run: npx prisma generate --schema=./apps/api/prisma/schema.prisma
      - name: Run migrations
        run: npx prisma migrate deploy --schema=./apps/api/prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:root@localhost:5432/renexus_test
      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:root@localhost:5432/renexus_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:root@localhost:5432/renexus_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build API
        run: npm run build:api
      - name: Build Web Client
        run: npm run build:web
      - name: Upload API build
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: dist/apps/api/
      - name: Upload Web build
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: dist/apps/web-client/

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: renexus_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Download API build
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: dist/apps/api/
      - name: Download Web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: dist/apps/web-client/
      - name: Generate Prisma client
        run: npx prisma generate --schema=./apps/api/prisma/schema.prisma
      - name: Run migrations
        run: npx prisma migrate deploy --schema=./apps/api/prisma/schema.prisma
        env:
          DATABASE_URL: postgresql://postgres:root@localhost:5432/renexus_e2e
      - name: Start API server
        run: node dist/apps/api/main.js &
        env:
          DATABASE_URL: postgresql://postgres:root@localhost:5432/renexus_e2e
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3000
          NODE_ENV: test
      - name: Start Web server
        run: npx serve -s dist/apps/web-client -l 3001 &
      - name: Wait for servers to start
        run: sleep 10
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3001
          API_URL: http://localhost:3000
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: test-reports/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --audit-level=high
      - name: Run custom security audit
        run: npx ts-node tests/security/security-audit.ts
      - name: Upload security audit report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-report
          path: security-audit-report.json

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [e2e-test, security-audit]
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Download API build
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: dist/apps/api/
      - name: Download Web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: dist/apps/web-client/
      - name: Deploy API to staging
        run: echo "Deploying API to staging environment"
        # Add actual deployment steps here
      - name: Deploy Web to staging
        run: echo "Deploying Web client to staging environment"
        # Add actual deployment steps here

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [e2e-test, security-audit]
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Download API build
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: dist/apps/api/
      - name: Download Web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: dist/apps/web-client/
      - name: Deploy API to production
        run: echo "Deploying API to production environment"
        # Add actual deployment steps here
      - name: Deploy Web to production
        run: echo "Deploying Web client to production environment"
        # Add actual deployment steps here
