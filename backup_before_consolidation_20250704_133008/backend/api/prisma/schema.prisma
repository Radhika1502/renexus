generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id                String              @id @default(uuid())
  title             String
  description       String?
  status            String              @default("todo") // todo, in_progress, review, done
  priority          String              @default("medium") // low, medium, high
  estimatedHours    Float?
  dueDate           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id])
  assigneeId        String?
  timeLogs          TimeLog[]
  attachments       TaskAttachment[]
  dependentOn       TaskDependency[]    @relation("DependentTask")
  dependencyFor     TaskDependency[]    @relation("ParentTask")
  createdFromTemplate Boolean           @default(false)
}

model TaskDependency {
  id               String    @id @default(uuid())
  taskId           String    // Task that depends on another
  dependsOnTaskId  String    // Task that is depended upon
  createdAt        DateTime  @default(now())
  
  task             Task      @relation("DependentTask", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask    Task      @relation("ParentTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnTaskId])
}

model TaskAttachment {
  id          String    @id @default(uuid())
  taskId      String
  filename    String
  path        String
  mimetype    String
  size        Int
  uploadedAt  DateTime  @default(now())
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TimeLog {
  id        String    @id @default(uuid())
  taskId    String
  userId    String
  userName  String
  startTime DateTime
  endTime   DateTime?
  duration  Float?    // in seconds
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskTemplate {
  id             String    @id @default(uuid())
  name           String
  description    String?
  projectId      String?
  priority       String    @default("medium") // low, medium, high
  estimatedHours Float?
  category       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  fields         Json      // Stores which fields to include when creating from template
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  tasks       Task[]
}
